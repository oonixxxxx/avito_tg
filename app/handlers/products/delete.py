from aiogram import types, F, Router
from aiogram.filters import Command
import sqlite3
import asyncio

from app.handlers.tgk.publish_to_channel import publish_to_channel
from app.config import ADMIN_ID, CHANNEL_ID, BOT_TOKEN

router = Router(name="search-router")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("delete_"))
async def delete_product_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    product_id = int(callback.data.split("_")[1])
    
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ç–æ–≤–∞—Ä–∞
        c.execute("SELECT user_id, published_message_id FROM products WHERE product_id = ?", (product_id,))
        product = c.fetchone()
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        owner_id, message_id = product
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        if user_id != owner_id and user_id != ADMIN_ID:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
            return
            
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –ë–î
        c.execute("DELETE FROM products WHERE product_id = ?", (product_id,))
        conn.commit()
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
        if message_id:
            try:
                await bot.delete_message(chat_id=CHANNEL_ID, message_id=message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")
        
        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
        await callback.message.edit_caption(caption=f"‚ùå –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω\nID: {product_id}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
    
    finally:
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
@router.message(Command("sync_channel"))
async def cmd_sync_channel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
        
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–∞–Ω–∞–ª–∞...")
    
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT product_id, description, photo_file_id FROM products")
    products = c.fetchall()
    conn.close()
    
    published_count = 0
    errors = 0
    
    for product_id, description, photo_file_id in products:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä
            conn = sqlite3.connect('shop.db')
            c = conn.cursor()
            c.execute("SELECT published_message_id FROM products WHERE product_id = ?", (product_id,))
            message_id = c.fetchone()[0]
            conn.close()
            
            if message_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await bot.get_message(chat_id=CHANNEL_ID, message_id=message_id)
                    continue  # –°–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                except:
                    pass
                    
            # –ü—É–±–ª–∏–∫—É–µ–º —Ç–æ–≤–∞—Ä
            message_id = await publish_to_channel(product_id, description, photo_file_id)
            if message_id:
                published_count += 1
            else:
                errors += 1
                
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
            errors += 1
    
    await message.answer(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                         f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {published_count}\n"
                         f"–û—à–∏–±–æ–∫: {errors}")