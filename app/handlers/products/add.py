from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import sqlite3

router = Router(name="add-router")


# –°–æ–∑–¥–∞–µ–º –æ–±—å–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddProduct(StatesGroup):
    waiting_description = State()
    waiting_photo = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
@router.message(Command("add"))
async def cmd_add(message: types.Message, state: FSMContext):
    await state.set_state(AddProduct.waiting_description)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ —Ü–µ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)
@router.message(AddProduct.waiting_description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddProduct.waiting_photo)
    await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
@router.message(AddProduct.waiting_photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ñ–æ—Ç–æ
    photo_file_id = message.photo[-1].file_id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    description = data.get('description', '')
    user_id = message.from_user.id
    
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É
        c.execute('''INSERT INTO products (user_id, description, photo_file_id)
                     VALUES (?, ?, ?)''', (user_id, description, photo_file_id))
        conn.commit()
        
        await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        await message.answer_photo(
            photo=photo_file_id,
            caption=f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
    
    finally:
        conn.close()
        await state.clear()