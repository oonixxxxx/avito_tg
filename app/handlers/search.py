from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router

router = Router(name="start-router")

class SearchProduct(StatesGroup):
    waiting_query = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search
@dp.message(Command("search"))
async def cmd_search(message: types.Message, state: FSMContext):
    await state.set_state(SearchProduct.waiting_query)
    await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@dp.message(SearchProduct.waiting_query)
async def process_search_query(message: types.Message, state: FSMContext):
    query = message.text.strip()
    if len(query) < 2:
        await message.answer("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    results = search_products(query)
    
    if not results:
        await message.answer("üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return
    
    await message.answer(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å)
    for i, (product_id, description, photo_file_id) in enumerate(results[:5], 1):
        caption = f"–†–µ–∑—É–ª—å—Ç–∞—Ç #{i}\nID: {product_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        await message.answer_photo(
            photo=photo_file_id,
            caption=caption
        )
    
    if len(results) > 5:
        await message.answer(f"‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.")
    
    await state.clear()

# –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query(F.data.startswith("similar_"))
async def similar_products_handler(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = get_product_by_id(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    _, description, _ = product
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    words = re.findall(r'\w{4,}', description.lower())
    if not words:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
        return
    
    # –ò—â–µ–º –ø–æ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–º —Å–ª–æ–≤–∞–º
    results = []
    for word in words[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞
        results.extend(search_products(word))
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_results = {r[0]: r for r in results}.values()
    
    if not unique_results:
        await callback.answer("–ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    await callback.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_results)} –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    await callback.message.answer(f"üîç –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã ({len(unique_results)}):")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for i, (p_id, desc, file_id) in enumerate(unique_results[:5], 1):
        caption = f"–¢–æ–≤–∞—Ä #{i}\nID: {p_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}"
        await callback.message.answer_photo(
            photo=file_id,
            caption=caption
        )