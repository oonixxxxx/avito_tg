from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3

from app.keyboard.catalog_keyboard import new_keyboard, update_keyboard

router = Router(name="catalog-router")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_total_products():
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM products")
    total = c.fetchone()[0]
    conn.close()
    return total

def get_product_by_index(index):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute("SELECT description, photo_file_id FROM products ORDER BY product_id LIMIT 1 OFFSET ?", (index,))
    product = c.fetchone()
    conn.close()
    return product

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog
@router.message(Command("catalog"))
async def cmd_catalog(message: types.Message):
    total_products = get_total_products()
    
    if total_products == 0:
        await message.answer("üì≠ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")
        return
        
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = new_keyboard #–∏–∑ –º–æ–¥—É–ª—è —Å –∫–ª–∞—Å–∏–≤–∞—Ç—É—Ä–∞–º–∏
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
    product = get_product_by_index(0)
    if product:
        description, photo_file_id = product
        await message.answer_photo(
            photo=photo_file_id,
            caption=f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–∞
@router.callback_query(F.data.startswith("catalog_"))
async def catalog_callback_handler(callback: types.CallbackQuery):
    data = callback.data
    total_products = get_total_products()
    
    if total_products == 0:
        await callback.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    action, current_index_str = data.split("_")[1:]
    current_index = int(current_index_str)
    new_index = current_index
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if action == "prev":
        new_index = (current_index - 1) % total_products
    elif action == "next":
        new_index = (current_index + 1) % total_products
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ –Ω–æ–≤–æ–º—É –∏–Ω–¥–µ–∫—Å—É
    product = get_product_by_index(new_index)
    if not product:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞")
        return
    
    description, photo_file_id = product
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"catalog_prev_{new_index}"),
            InlineKeyboardButton(text=f"{new_index+1}/{total_products}", 
                                callback_data="current_position"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"catalog_next_{new_index}")
        ]
    ])
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    media = types.InputMediaPhoto(media=photo_file_id, 
                                caption=f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    
    await callback.message.edit_media(media, reply_markup=keyboard)
    await callback.answer()